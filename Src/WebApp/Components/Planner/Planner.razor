@using Isitar.RoomPlanner.Logic.Models
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.Json
@using Newtonsoft.Json
@inject IJSRuntime JS

<div class="main">
    <svg class="canvas @(isMeasuring ? "is-measuring" : "")"
         @onclick="CanvasClicked"
         @onmousemove="async e => await MouseMoved(e)"
         style="@(!string.IsNullOrWhiteSpace(Plan.BackgroundImage) ? $"background-image: url({Plan.BackgroundImage});" : "")"
         viewBox="0 0 @svgCanvasViewBox.width @svgCanvasViewBox.height"
         preserveAspectRatio="none">
        @if (isMeasuring && currentMeasure.EndX != 0)
        {
            <rect x="@(Math.Min(currentMeasure.EndX, currentMeasure.StartX))"
                  y="@(Math.Min(currentMeasure.EndY, currentMeasure.StartY))"
                  width="@(Math.Abs(currentMeasure.EndX - currentMeasure.StartX))"
                  height="@(Math.Abs(currentMeasure.EndY - currentMeasure.StartY))"
                  stroke="red"
                  stroke-width="3"/>
        }

        @foreach (var placedFurniture in Plan.PlacedFurnitures)
        {
            <polygon
                points="
                   @ScaleToViewX(placedFurniture.RotatedCoords().topLeft.X),@ScaleToViewY(placedFurniture.RotatedCoords().topLeft.Y)
                   @ScaleToViewX(placedFurniture.RotatedCoords().topRight.X),@ScaleToViewY(placedFurniture.RotatedCoords().topRight.Y)
                   @ScaleToViewX(placedFurniture.RotatedCoords().BottomRight.X),@ScaleToViewY(placedFurniture.RotatedCoords().BottomRight.Y)
                   @ScaleToViewX(placedFurniture.RotatedCoords().BottomLeft.X),@ScaleToViewY(placedFurniture.RotatedCoords().BottomLeft.Y)
"
                style="fill: @placedFurniture.Furniture.Color;
                @((placedFurniture == currentlySelectedPlacedFurniture) ? "stroke: red;" : "")
"
                @onclick:stopPropagation="true" @onclick:preventDefault="true"
                @onmousedown:stopPropagation="true" @onmousedown:preventDefault="true"
                @onclick="() => currentlySelectedPlacedFurniture = placedFurniture"
                @onmouseup="async e => await DragEnded(e)"
                @onmousedown="async (e) => await DragStarted(e, placedFurniture)"
                class="placed-furniture">
                
            </polygon>
            <text><text x="@ScaleToViewX(placedFurniture.Coordinates.X)" y="@ScaleToViewY(placedFurniture.Coordinates.Y)">@placedFurniture.Furniture.Name</text></text>
        }
    </svg>
    <div class="toolbox">
        <h2 class="is-size-5">Plan</h2>
        <label>
            <input class="input" placeholder="Name" @bind="Plan.Name"/>
        </label><br/>
        <label>
            <InputFile type="file" OnChange="@SetBackgroundFile"/>
        </label>
        <hr/>
        <h2 class="is-size-5">Furnitures</h2>
        <ul>
            @foreach (var furniture in Plan.Furnitures)
            {
                <li class="box mb-1 p-3 @(furniture == selectedFurniture ? "has-border-top is-primary" : "")"
                    @onclick="() => selectedFurniture = furniture">
                    <p class="is-bold">@furniture.Name</p>
                    <p>
                        <small>
                            w: @furniture.Width, l: @furniture.Length, h: @furniture.Height
                        </small>
                    </p>
                </li>
            }
        </ul>
        <button class="button is-success is-block is-fullwidth" @onclick="() => showFurnitureForm = true">Möbel hinzufügen</button>
        @if (showFurnitureForm)
        {
            <FurnitureForm FormSubmitted="furniture => { if (furniture is not null) { Plan.Furnitures.Add(furniture); } showFurnitureForm = false;}"></FurnitureForm>
        }

        <h2 class="is-size-5"> Tools </h2>
        <ul>
            <li
                @onclick="() => { isMeasuring = true; }"
                class="box mb-1 p-3 @(isMeasuring ? "has-border-top is-primary" : "")">
                Measure
                @if (isMeasuring)
                {
                    <div class="field">
                        <label class="label">Start</label>
                        <div class="field-body">
                            <input class="input" @bind="@currentMeasure.StartX"/>
                            <input class="input" @bind="@currentMeasure.StartY"/>
                            <button class="button is-danger" type="button" @onclick="() => {currentMeasure.StartX = 0; currentMeasure.StartY = 0;}">x</button>
                        </div>
                    </div>
                    <div class="field">
                        <label class="label">End</label>
                        <div class="field-body">
                            <input class="input" @bind="@currentMeasure.EndX"/>
                            <input class="input" @bind="@currentMeasure.EndY"/>
                            <button class="button is-danger" type="button" @onclick="() => {currentMeasure.EndX = 0; currentMeasure.EndY = 0;}">x</button>
                        </div>
                    </div>

                    <div class="field">
                        <label class="label">
                            Distance
                        </label>
                        <div class="field-body">
                            <input class="input" @bind="@currentMeasure.DistanceX"/>
                            <input class="input" @bind="@currentMeasure.DistanceY"/>
                        </div>
                    </div>
                    <button type="button" class="button is-success" @onclick="ApplyScaling" @onclick:stopPropagation="true">Apply Scaling</button>
                    <button type="button" class="button is-danger" @onclick="() => { isMeasuring = false; currentMeasure = new Measures(); }" @onclick:stopPropagation="true">Cancel</button>
                }
            </li>
        </ul>
        @if (currentlySelectedPlacedFurniture is not null)
        {
            <h2 class="is-size-5">@currentlySelectedPlacedFurniture.Furniture.Name</h2>
            <div class="box">
               x: @currentlySelectedPlacedFurniture.Coordinates.X <br/>
               y: @currentlySelectedPlacedFurniture.Coordinates.Y <br/>
               <div class="field">
                   <div class="field-label"><label class="label">&alpha;</label></div>
                   <div class="field-body"><input class="input" @bind="currentlySelectedPlacedFurniture.RotationInDeg" /></div>
               </div>
               <button class="button is-danger" type="button" @onclick="() => { RemovePlacedFurniture(currentlySelectedPlacedFurniture); currentlySelectedPlacedFurniture = null;}">x</button>
            </div>
        }
        <div class="mt-3">
            <button type="button" class="button is-fullwidth is-success is-large" @onclick="SavePlan" >Save</button>
        </div>
    </div>
</div>

@code
{
    class Measures
    {
        public double StartX { get; set; }
        public double StartY { get; set; }
        public double EndX { get; set; }
        public double EndY { get; set; }
        public double DistanceX { get; set; }
        public double DistanceY { get; set; }
    }

    [Parameter]
    public Plan Plan { get; set; } = null!;

    [JSInvokable]
    public async Task CanvasResized(double width, double height)
    {
        if (canvasDimensions != (width, height))
        {
            canvasDimensions = (width, height);
            StateHasChanged();
        }
    }

    private (double width, double height) canvasDimensions;
    private (double width, double height) svgCanvasViewBox = (1000, 1000);
    private DotNetObjectReference<Planner> objRef;

    private bool showFurnitureForm = false;

    private bool isMeasuring = false;
    private bool isDragging = false;

    private Measures currentMeasure = new();

    private Furniture? selectedFurniture = null;
    private PlacedFurniture? currentlySelectedPlacedFurniture = null;

    protected override void OnInitialized()
    {
        objRef = DotNetObjectReference.Create(this);
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeVoidAsync("addCanvasListener", objRef);
        await JS.InvokeAsync<IJSObjectReference>("import", "./Components/Planner/Planner.razor.js");
        await base.OnAfterRenderAsync(firstRender);
    }

    private double ScaleToViewX(double m) => m * Plan.ScaleFactorX(svgCanvasViewBox.width);
    private double ScaleToViewY(double m) => m * Plan.ScaleFactorY(svgCanvasViewBox.height);
    private double ScaleToPlanX(double px) => px / Plan.ScaleFactorX(svgCanvasViewBox.width);
    private double ScaleToPlanY(double px) => px / Plan.ScaleFactorY(svgCanvasViewBox.height);

    private void CanvasClicked(MouseEventArgs e)
    {
        if (isDragging)
        {
            return;
        }
        if (currentlySelectedPlacedFurniture is not null)
        {
            currentlySelectedPlacedFurniture = null;
        }
        
        var (x, y) = RelativeCoordinates(e);
        if (isMeasuring)
        {
            if (currentMeasure.StartX > 0 || currentMeasure.StartY > 0)
            {
                currentMeasure.EndX = x;
                currentMeasure.EndY = y;
            }
            else
            {
                currentMeasure.StartX = x;
                currentMeasure.StartY = y;
            }
            return;
        }

        if (selectedFurniture is not null)
        {
            Plan.PlacedFurnitures.Add(new PlacedFurniture
            {
                Furniture = selectedFurniture,
                Coordinates = new Coordinates(ScaleToPlanX(x),ScaleToPlanY(y)),
            });
        }
    }

    private async Task ApplyScaling()
    {
        if (currentMeasure.DistanceX == 0d)
        {
            return;
        }
        await InvokeAsync(() =>
        {
            var pxDistanceX = Math.Abs(currentMeasure.EndX - currentMeasure.StartX);
            var pxDistanceY = Math.Abs(currentMeasure.EndY - currentMeasure.StartY);

            Plan.CalibratedAtWidth = svgCanvasViewBox.width;
            Plan.CalibratedWidthForOneUnit = pxDistanceX / currentMeasure.DistanceX;

            Plan.CalibratedAtHeight = svgCanvasViewBox.height;
            Plan.CalibratedHeightForOneUnit = pxDistanceY == 0 || currentMeasure.DistanceY == 0 ? Plan.CalibratedWidthForOneUnit : pxDistanceY / currentMeasure.DistanceY;
        });

        isMeasuring = false;
    }

    private async Task SetBackgroundFile(InputFileChangeEventArgs e)
    {
        using var ms = new MemoryStream();
        await e.File.OpenReadStream().CopyToAsync(ms);
        var content = Convert.ToBase64String(ms.ToArray());
        Plan.BackgroundImage = $"data:{e.File.ContentType};base64,{content}";
    }

    private async Task DragStarted(MouseEventArgs e, PlacedFurniture placedFurniture)
    {
        (startDragX, startDragY) = (e.ClientX, e.ClientY);
        currentlySelectedPlacedFurniture = placedFurniture;
        isDragging = true;
        Console.WriteLine("dragstarted called");
    }

    private double startDragX = 0;
    private double startDragY = 0;

    private (double x, double y) RelativeCoordinates(MouseEventArgs e)
    {
        return RelativeCoordinates((e.OffsetX, e.OffsetY));
    }

    private (double x, double y) RelativeCoordinates((double x, double y) coords)
    {
        return (
            coords.x * (svgCanvasViewBox.width / canvasDimensions.width),
                coords.y * (svgCanvasViewBox.height / canvasDimensions.height)
            );
    }

    private async Task DragEnded(MouseEventArgs e)
    {
            if (currentlySelectedPlacedFurniture is null || !isDragging)
            {
                return;
            }
        await InvokeAsync(() =>
        {
            var (deltaX, deltaY) = RelativeCoordinates((e.ClientX - startDragX, e.ClientY - startDragY));
            currentlySelectedPlacedFurniture.Coordinates = new Coordinates(
                currentlySelectedPlacedFurniture.Coordinates.X + ScaleToPlanX(deltaX),
                currentlySelectedPlacedFurniture.Coordinates.Y + ScaleToPlanY(deltaY)
                );
        });
        currentlySelectedPlacedFurniture = null;
        isDragging = false;
    }

    private async Task MouseMoved(MouseEventArgs e)
    {
        if (currentlySelectedPlacedFurniture is null || !isDragging)
        {
            return;
        }
        await InvokeAsync(() =>
        {
            var (deltaX, deltaY) = RelativeCoordinates((e.ClientX - startDragX, e.ClientY - startDragY));
            currentlySelectedPlacedFurniture.Coordinates = new Coordinates(
                currentlySelectedPlacedFurniture.Coordinates.X + ScaleToPlanX(deltaX),
                currentlySelectedPlacedFurniture.Coordinates.Y + ScaleToPlanY(deltaY)
                );
            (startDragX, startDragY) = (e.ClientX, e.ClientY);
        });
    }

    private void RemovePlacedFurniture(PlacedFurniture placedFurniture)
    {
        Plan.PlacedFurnitures.Remove(placedFurniture);
    }

    private async Task SavePlan()
    {
        var serializedStream = new MemoryStream(System.Text.Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(Plan)));
        var fileName = $"{Plan.Name}.json";

        using var streamRef = new DotNetStreamReference(stream: serializedStream);

        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }
}