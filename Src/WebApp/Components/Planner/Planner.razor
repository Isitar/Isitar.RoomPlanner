@using Isitar.RoomPlanner.Logic.Models
@using Microsoft.AspNetCore.Components.Forms
@inject IJSRuntime JS

<div class="main">
    <div class="canvas
@(isMeasuring ? "is-measuring" : "")
" @onclick="CanvasClicked"
         style="@(!string.IsNullOrWhiteSpace(Plan.BackgroundImage) ? $"background-image: url({Plan.BackgroundImage});" : "")">
        @if (isMeasuring && currentMeasure.EndX != 0m)
        {
            <div style="border: 3px solid red;
                    top: @(Math.Min(currentMeasure.EndY, currentMeasure.StartY))px;
                    left: @(Math.Min(currentMeasure.EndX, currentMeasure.StartX))px;
                    width: @(Math.Abs(currentMeasure.EndX - currentMeasure.StartX))px;
                    height: @(Math.Abs(currentMeasure.EndY - currentMeasure.StartY))px;
"
            />
            
        }
        
        @foreach (var placedFurniture in Plan.PlacedFurnitures)
        {
            <div style="
                top: @ScaleToViewY(placedFurniture.Coordinates.Y)px;
                left: @ScaleToViewX(placedFurniture.Coordinates.X)px;
                background: @placedFurniture.Furniture.Color;
                width: @ScaleToViewX(placedFurniture.Furniture.Width)px;
                height: @ScaleToViewY(placedFurniture.Furniture.Length)px;
                "
                 draggable="true"
                 @ondragstart="async (e) => await DragStarted(e, placedFurniture)"
                 @ondragend="async e => await DragEnded(e)"
                 class="placed-furniture">
                @placedFurniture.Furniture.Name
            </div>
        }
    </div>
    <div class="toolbox">
        <h2 class="is-size-5">Plan</h2>
        <label>
            <input class="input" placeholder="Name" @bind="Plan.Name"/>
        </label><br/>
        <label>
            <InputFile type="file" OnChange="@SetBackgroundFile"/>
        </label>
        <hr/>
        <h2 class="is-size-5">Furnitures</h2>
        <ul>
            @foreach (var furniture in Plan.Furnitures)
            {
                <li class="box mb-1 p-3 @(furniture == selectedFurniture ? "has-border-top is-primary" : "")"
                    @onclick="() => selectedFurniture = furniture">
                    <p class="is-bold">@furniture.Name</p>
                    <p>
                        <small>
                            w: @furniture.Width, l: @furniture.Length, h: @furniture.Height
                        </small>
                    </p>
                </li>
            }
        </ul>
        <button class="button is-success is-block is-fullwidth" @onclick="() => showFurnitureForm = true">Möbel hinzufügen</button>
        @if (showFurnitureForm)
        {
            <FurnitureForm FormSubmitted="furniture => { if (furniture is not null) { Plan.Furnitures.Add(furniture); } showFurnitureForm = false;}"></FurnitureForm>
        }

        <h2> Tools </h2>
        <ul>
            <li
                @onclick="() => { isMeasuring = true; }"
                class="box mb-1 p-3 @(isMeasuring ? "has-border-top is-primary" : "")">
                Measure
                @if (isMeasuring)
                        {
                                <div class="field">
                                    <label class="label">Start</label>
                                    <div class="field-body">
                                        <input class="input" @bind="@currentMeasure.StartX"/>
                                        <input class="input" @bind="@currentMeasure.StartY"/>
                                        <button class="button is-danger" type="button" @onclick="() => {currentMeasure.StartX = 0; currentMeasure.StartY = 0;}">x</button>
                                    </div>
                                </div>
                                <div class="field">
                                    <label class="label">End</label>
                                    <div class="field-body">
                                        <input class="input" @bind="@currentMeasure.EndX"/>
                                        <input class="input" @bind="@currentMeasure.EndY"/>
                                        <button class="button is-danger" type="button" @onclick="() => {currentMeasure.EndX = 0; currentMeasure.EndY = 0;}">x</button>
                                    </div>
                                </div>
                
                                <div class="field">
                                    <label class="label">
                                        Distance
                                    </label>
                                    <div class="field-body">
                                        <input class="input" @bind="@currentMeasure.DistanceX"/>
                                        <input class="input" @bind="@currentMeasure.DistanceY"/>
                                    </div>
                                </div>
                            <button type="button" class="button is-success" @onclick="ApplyScaling" @onclick:stopPropagation="true">Apply Scaling</button>
                            <button type="button" class="button is-danger" @onclick="() => { isMeasuring = false; currentMeasure = new Measures(); }" @onclick:stopPropagation="true">Cancel</button>
                        }
            </li>
        </ul>
        

        <code>
        </code>
    </div>
</div>

@code
{
    class Measures
    {
        public decimal StartX { get; set; }
        public decimal StartY { get; set; }
        public decimal EndX { get; set; }
        public decimal EndY { get; set; }
        public decimal DistanceX { get; set; }
        public decimal DistanceY { get; set; }
    }

    [Parameter]
    public Plan Plan { get; set; } = null!;

    [JSInvokable]
    public async Task CanvasResized(decimal width, decimal height)
    {
        if (canvasDimensions != (width, height))
        {
            canvasDimensions = (width, height);
            StateHasChanged();
        }
    }

    private (decimal width, decimal height) canvasDimensions;
    private DotNetObjectReference<Planner> objRef;

    private bool showFurnitureForm = false;

    private bool isMeasuring = false;

    private Measures currentMeasure = new();

    private Furniture? selectedFurniture = null;
    private PlacedFurniture? currentlySelectedPlacedFurniture = null;

    protected override void OnInitialized()
    {
        objRef = DotNetObjectReference.Create(this);
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeVoidAsync("addCanvasListener", objRef);
        await base.OnAfterRenderAsync(firstRender);
    }

    private decimal ScaleToViewX(decimal m)
    {
        return m * Plan.ScaleFactorX(canvasDimensions.width);
    }

    private decimal ScaleToViewY(decimal m)
    {
        return m * Plan.ScaleFactorY(canvasDimensions.height);
    }

    private decimal ScaleToPlanX(decimal px)
    {
        return px / Plan.ScaleFactorX(canvasDimensions.width);
    }

    private decimal ScaleToPlanY(decimal px)
    {
        return px / Plan.ScaleFactorY(canvasDimensions.height);
    }

    private void CanvasClicked(MouseEventArgs eventArgs)
    {
        if (isMeasuring)
        {
            if (currentMeasure.StartX > 0 || currentMeasure.StartY > 0)
            {
                currentMeasure.EndX = (decimal)eventArgs.OffsetX;
                currentMeasure.EndY = (decimal)eventArgs.OffsetY;
            }
            else
            {
                currentMeasure.StartX = (decimal)eventArgs.OffsetX;
                currentMeasure.StartY = (decimal)eventArgs.OffsetY;
            }
            return;
        }

        if (selectedFurniture is not null)
        {
            Plan.PlacedFurnitures.Add(new PlacedFurniture
            {
                Furniture = selectedFurniture,
                Coordinates = (ScaleToPlanX((decimal)eventArgs.OffsetX),ScaleToPlanY((decimal)eventArgs.OffsetY)),
            });
        }
    }

    private async Task ApplyScaling()
    {
        if (currentMeasure.DistanceX == 0m)
        {
            return;
        }

        var pxDistanceX = Math.Abs(currentMeasure.EndX - currentMeasure.StartX);
        var pxDistanceY = Math.Abs(currentMeasure.EndY - currentMeasure.StartY);

        Plan.CalibratedAtWidth = canvasDimensions.width;
        Plan.CalibratedWidthForOneUnit = pxDistanceX / currentMeasure.DistanceX;

        Plan.CalibratedAtHeight = canvasDimensions.height;
        Plan.CalibratedHeightForOneUnit = pxDistanceY == 0 || currentMeasure.DistanceY == 0 ? Plan.CalibratedWidthForOneUnit : pxDistanceY / currentMeasure.DistanceY;

        isMeasuring = false;
    }

    private async Task SetBackgroundFile(InputFileChangeEventArgs e)
    {
        using var ms = new MemoryStream();
        await e.File.OpenReadStream().CopyToAsync(ms);
        var content = Convert.ToBase64String(ms.ToArray());
        Plan.BackgroundImage = $"data:{e.File.ContentType};base64,{content}";
    }

    private async Task DragStarted(DragEventArgs e, PlacedFurniture placedFurniture)
    {
        startDragX = (decimal) e.ClientX;
        startDragY = (decimal)e.ClientY;
        currentlySelectedPlacedFurniture = placedFurniture;
    }

    private decimal startDragX = 0;
    private decimal startDragY = 0;
    
    private async Task DragEnded(DragEventArgs e)
    {
       var endDragX = (decimal)e.ClientX;
      var  endDragY = (decimal)e.ClientY;
        currentlySelectedPlacedFurniture.Coordinates = (currentlySelectedPlacedFurniture.Coordinates.X + ScaleToPlanX(endDragX - startDragX), 
            currentlySelectedPlacedFurniture.Coordinates.Y + ScaleToPlanY(endDragY - startDragY)
            );
        currentlySelectedPlacedFurniture = null;
    }
}